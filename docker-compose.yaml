version: "3.8"

services:
  db:
    image: postgres:15
    container_name: db
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5 
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
      - DB_PORT=5432
      - SCHEDULER_INTERVAL=1
      - AI_MODEL=gemini
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - GRPC_VERBOSITY=NONE
      - GRPC_CPP_MIN_LOG_LEVEL=3
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
    networks:
      - app-network


  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend
    env_file:
      - ./.env
    environment:
      - API_URL=http://backend:8000
    ports:
      - "8500:8500"
    volumes:
      - ./frontend:/app
    command: streamlit run src/main.py --server.port 8500 --server.address 0.0.0.0
    networks:
      - app-network

volumes:
  db_data:
    driver: local

networks:
  app-network:
    driver: bridge